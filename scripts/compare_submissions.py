#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è submission_val.csv –∏ data/submission.csv
"""

import pandas as pd
import ast
import sys
from pathlib import Path


def parse_annotation(annotation_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π"""
    try:
        return ast.literal_eval(annotation_str)
    except (ValueError, SyntaxError):
        return None


def compare_annotations(ann1, ann2):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏"""
    if ann1 == ann2:
        return True

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if ann1 is None or ann2 is None:
        return ann1 == ann2

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    ann1_sorted = sorted(ann1, key=lambda x: x[0])
    ann2_sorted = sorted(ann2, key=lambda x: x[0])

    return ann1_sorted == ann2_sorted


def main():
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    base_dir = Path(__file__).parent.parent
    val_file = base_dir / "submission_val.csv"
    data_file = base_dir / "data" / "submission.csv"

    print("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
    try:
        df_val = pd.read_csv(val_file, sep=";")
        df_data = pd.read_csv(data_file, sep=";")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")
        return 1

    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ submission_val.csv: {len(df_val)}")
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ data/submission.csv: {len(df_data)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    if len(df_val) != len(df_data):
        print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫!")
        print(f"   submission_val.csv: {len(df_val)}")
        print(f"   data/submission.csv: {len(df_data)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if list(df_val.columns) != list(df_data.columns):
        print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏!")
        print(f"   submission_val.csv: {list(df_val.columns)}")
        print(f"   data/submission.csv: {list(df_data.columns)}")

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    print("\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...")

    differences = []
    identical_count = 0
    total_comparisons = min(len(df_val), len(df_data))

    for i in range(total_comparisons):
        val_sample = df_val.iloc[i]["sample"]
        data_sample = df_data.iloc[i]["sample"]

        val_annotation = df_val.iloc[i]["annotation"]
        data_annotation = df_data.iloc[i]["annotation"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–∑—Ü—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        if val_sample != data_sample:
            differences.append(
                {
                    "row": i + 2,  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0 –∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    "type": "sample_mismatch",
                    "val_sample": val_sample,
                    "data_sample": data_sample,
                    "val_annotation": val_annotation,
                    "data_annotation": data_annotation,
                }
            )
            continue

        # –ü–∞—Ä—Å–∏–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        val_parsed = parse_annotation(val_annotation)
        data_parsed = parse_annotation(data_annotation)

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        if not compare_annotations(val_parsed, data_parsed):
            differences.append(
                {
                    "row": i + 2,
                    "type": "annotation_mismatch",
                    "sample": val_sample,
                    "val_annotation": val_annotation,
                    "data_annotation": data_annotation,
                }
            )
        else:
            identical_count += 1

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–æ: {total_comparisons}")
    print(f"   –ò–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {identical_count}")
    print(f"   –†–∞–∑–ª–∏—á–∞—é—â–∏—Ö—Å—è —Å—Ç—Ä–æ–∫: {len(differences)}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {identical_count/total_comparisons*100:.2f}%")

    if differences:
        print(f"\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –†–ê–ó–õ–ò–ß–ò–Ø:")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Ä–∞–∑–ª–∏—á–∏–π
        sample_mismatches = [d for d in differences if d["type"] == "sample_mismatch"]
        annotation_mismatches = [d for d in differences if d["type"] == "annotation_mismatch"]

        if sample_mismatches:
            print(f"\n   –ù–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –æ–±—Ä–∞–∑—Ü—ã ({len(sample_mismatches)}):")
            for diff in sample_mismatches[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"     –°—Ç—Ä–æ–∫–∞ {diff['row']}:")
                print(f"       val: '{diff['val_sample']}'")
                print(f"       data: '{diff['data_sample']}'")

        if annotation_mismatches:
            print(f"\n   –ù–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ ({len(annotation_mismatches)}):")
            for diff in annotation_mismatches[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"     –°—Ç—Ä–æ–∫–∞ {diff['row']} - '{diff['sample']}':")
                print(f"       val: {diff['val_annotation']}")
                print(f"       data: {diff['data_annotation']}")

        if len(differences) > 20:
            print(f"     ... –∏ –µ—â–µ {len(differences) - 20} —Ä–∞–∑–ª–∏—á–∏–π")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
        output_file = base_dir / "comparison_report.csv"
        print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –≤ {output_file}")

        df_report = pd.DataFrame(differences)
        df_report.to_csv(output_file, index=False, sep=";")
        print(f"   –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {len(differences)} —Ä–∞–∑–ª–∏—á–∏–π")

    else:
        print(f"\n‚úÖ –§–∞–π–ª—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–Ω—ã!")

    return 0


if __name__ == "__main__":
    sys.exit(main())
